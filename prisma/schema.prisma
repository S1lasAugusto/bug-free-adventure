generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Example {
  id String @id @default(cuid())
}



model User {
  id            String            @id @default(cuid())
  name          String
  email         String            @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime          @default(now())
  protusId      String?           @unique
  updatedAt     DateTime          @updatedAt
  onBoarded     Boolean           @default(false)
  USNEmail      String?
  leaderboard   Boolean?

  history       ExerciseHistory[]
  preferences   UserPreference[]
  todo          ToDo[]
  subplans      SubPlan[]
  generalPlans  GeneralPlan[]
}

model UserPreference {
  id                 String         @id @default(cuid())
  userId             String
  selectedComponents SelectedEnum[] @default([])
  leaderboard        Boolean        @default(false)
  createdAt          DateTime       @default(now())
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ExerciseHistory {
  historyId String @id @default(cuid())

  visitedAt   DateTime
  completedAt DateTime?
  attempts    Int?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  activityResourceId String
  ActivityResource   ActivityResource @relation(fields: [activityResourceId], references: [id], onDelete: Cascade)

  @@unique([userId, activityResourceId], name: "userExerciseHistoryOnActivityResource")
}

model ToDo {
  todoId String @id @default(cuid())

  dueDate     DateTime
  completed   Boolean
  name        String
  completedAt DateTime?
  createdAt   DateTime  @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GeneralPlan {
  id        String   @id @default(cuid())
  userId    String
  name      String
  gradeGoal String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subPlans  SubPlan[]
}

model SubPlan {
  id          String   @id @default(cuid())
  name        String
  topic       String
  mastery     Int      @default(0)
  status      String   @default("Active") // "Active" ou "Completed"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  selectedDays       String[]
  selectedStrategies String[]
  customStrategies   Json?
  hoursPerDay        Int      @default(2)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reflections Reflection[]
  generalPlanId String?
  generalPlan   GeneralPlan? @relation(fields: [generalPlanId], references: [id])
  @@index([userId])
}

model Reflection {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  type        String
  control     Int?
  awareness   Int?
  strengths   Int?
  planning    Int?
  alternatives Int?
  summary     Int?
  diagrams    Int?
  adaptation  Int?
  comment     String?
  subPlan     SubPlan  @relation(fields: [subPlanId], references: [id])
  subPlanId   String
}



model Course {
  courseName String
  id         String   @id @default(cuid())
  modules    Module[]
}

model ActivityResource {
  type        type
  name        String
  url         String
  moduleId    String
  id          String            @id @default(cuid())
  relation    Module            @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  userHistory ExerciseHistory[]
}

model Module {
  moduleName       String
  order            Int
  id               String             @id @default(cuid())
  courseId         String
  ActivityResource ActivityResource[]
  relation         Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  description      String
}

enum type {
  EXAMPLE
  CHALLENGE
  CODING
}

enum SelectedEnum {
  HISTORYGRAPH
  STATS
  LEADERBOARD
  EXERCISEHISTORY
  TODO
  REGULA
}
